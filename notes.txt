Magesh Kuppan


Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 hour)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM 

Methodology:
    No powerpoints
    100% hands on driven training
    At least 50% of the participants should have completed the assignments

About You:
    Name
    Primary Skillset
    # of years of experience
    Experience in Golang (if any)

Software Requirements:
    - Go tools (https://go.dev/dl/)
    - Visual Studio Code (https://code.visualstudio.com) OR Goland (from jetbrains)
    - Go extenstion for Visual Studio Code

Verify Go installation
    In the command prompt
        go version

Training Repository :
    https://github.com/tkmagesh/IBM-Go-Sep-2022-2


Why Golang?
    1. Performance (on par with C++)
        Memory Management (with Garbage Collector)
    2. High level programming Language
    3. Compiled to native code (unlike python)
    4. Support for concurrency
   

Paradox of choice (barry schwartz)
    https://www.youtube.com/watch?v=VO6XEQIsCoM

1. Simplicity
    ONLY 25 keywords
    - No access modifiers
    - No classes (only structs)
    - No inheritence (only composition)
    - No exceptions (only errors)
    - No reference types (everything is a value)
    - No pointer arithmetic
    - No implicity type conversion

2. Lightweight
    - compiles to native code
    - Cross platform compilation
    - No need for any application servers (eg Tomcat, WebLogic, WebSphere)
    - Peformance equivalent to C++

3. Concurrency Support
    - concurrency?
        Ability to have more than one execution path
    - Built in scheduler
        # of OS threads <= # of concurrent operations 
    - concurrency is built in the language
        go keyword, select case construct, range construct, channel (chan data type), <- (channel operator)
    - APIs
        sync package
        sync/atomic package

To execute a go program
    go run <program.go>

to create a build
    go build <program.go>

to create a build in a different name
    go build -o <binary_name> <program.go>

to list all the environment variables
    go env

environment variables for platform
    GOOS
    GOARCH

The list of other platform configurations can be found at :
        https://go.dev/doc/install/source#environment
        go tool dist list

In mac/linux
    to create a buid for a different platform
        GOARCH=386 GOOS=windows go build hello-world.go

Data Types

    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real [float32] + imaginary [float32])
    complex128 (real [float64] + imaginary [float64])

    byte (alias for uint8)
    rune (alias for int32) (unicode character code point)

Functions
    - Variadic functions
    - Anonymous Functions
    - Higher Order Functions
        - Assign functions as values to variables
        - Pass functions as arguments to other functions
        - Functions can be returned as return result from other functions

Collections
    - Array
        fixed size collection of data of the same type

    - Slice
        varying size collection of data of the same type

    - Map
        Key/value collection

github.com/tkmagesh/app-1

Before Go 1.13
    GOPATH
        bin
        pkg
        src
            github.com
                tkmagesh
                    app-1
                        pkg-1
                        main.go
                            import "github.com/tkmagesh/app-1/pkg-1"

After Go 1.13
    module
        - all the code that you want to be versioned together

    go.mod
        name of the module
            advisable : repo path of the module
        go minimum version
        3rd party modules/package references

    package
        - folder

    To create a module
        go mod init <module_name>

    To execute a module
        go run .

    To create a build
        go build .

    To use a 3rd party module
        go get <module_name>

    To sync the go.mod file
        go mod tidy

    To localize the dependencies
        go mod vendor

    To download the dependencies
        go mod download

    Other commands
        go mod graph
        go mod why

    Module command reference
        https://go.dev/ref/mod


Interfaces
    implicitly implemented



Book:
    Growing Object Oriented Software Guided By Tests
    Agile Principles Patterns and Practices


Concurrency
    Assumptions that should NOT be made:
        1. Account for the time taken for a goroutine to execute
        2. Sequence in which the goroutines will be executed

    To detect race conditions
        
        go run -race <program.go>

        OR

        go build -race <program.go>

    Channels:
        A Receive operation is ALWAYS a blocking operation
        A Send operation can succeed ONLY if a receive operation is already initiated (conditions apply [ONLY in NON-BUFFERED channel])
        OR
        A Send operation is blocked until a receive operation is initiated (conditions apply [ONLY in NON-BUFFERED channel])

        In BUFFERED CHANNEL, A Send operation is a non-blocking operation if the buffer is free OR a receive is already initiated